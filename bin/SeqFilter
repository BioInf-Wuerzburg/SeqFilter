#!/usr/bin/env perl

# $Id$

use warnings;
use strict;

use Getopt::Long;
use Pod::Usage;

use FindBin qw($RealBin);
use lib "$RealBin/../lib/";

use Verbose;
use Verbose::ProgressBar;

use Fastq::Parser 0.09;
use Fastq::Seq 0.11;

use Fasta::Parser 0.08;
use Fasta::Seq 0.06;

our $VERSION = '1.04';
our ($REVISION) = '$Revision$' =~ /(\d+)/;
our ($MODIFIED) = '$Date$' =~ /Date: (\S+\s\S+)/;

=head1 NAME

SeqFilter - Versatile FASTA/FASTQ sequence file analysis and modification tool.

=cut

=head1 CHANGELOG seqz (combined Fasta-/FastqFilter)

=head2 1.04

=over

=item [Feature] C<--version> option. Also $VERSION is logged to stdout.

=item [Feature] C<--check-format> to check individual FASTQ entries for 
 correct format.

=back

=head2 1.03

=over

=item [DocFix] Some fixes in the documentation.

=item [Change] C<--rev-comp> uses opt2handle as well.

=item [Change] Consistent evaluation of parameter that specify one
 of the 'LIST', '-', 'FILE.

=item [Feature] C<--ids-pattern> allows to filter sequences based
 on a provided ID pattern.

=back

=head2 1.02

=over

=item [BugFix] --base-content percentage are now calculated based on 
 C<$filtered_length> and not C<$total_length>

=item [Feature] Renaming of ids including access to global output seq counter.

=item [BugFix] Accept "--substr FROM" without "TO". Means substr to end of seq.

=item [Feature] Specify C<--rev-comp *> to apply reverse complement to
 all sequences of the file.

=item [BugFix] Fixed error determining size of gzipped files.

=item [Feature] Directly read gzipped files using of the latest 
 feature of Fasta::Parser / Fastq::Parser.

=item [BugFix] Fixed an incorrect progress display at eof.

=item [BugFix] Replacement in --substr-perl-style was not splitted correctly

=item [Feature] C<--substr> FROM > TO returns TO-FROM as reverse complement.

=back

=head2 1.01

=over

=item [Feature] C<--substr-perl-style> enables usage of C<--substr> OFFSET
 [LENGTH [REPLACEMENT]].

=item [Change] C<--substr> uses by default  TO FROM syntax instead of OFFSET
 [LENGTH [REPLACEMENT]]

=item [Feature] C<--rev-comp> to output sequences specified by ID as reverse 
 complement.

=item [Feature] Comment lines indicated by leading "#" are now supported in
 substr and ids files.

=item [Feature] Verbose levels to omit Progressbar and entire output, 
 --quiet as convenience for --verbose=0.

=back

=head2 1.00

=over


=item [BugFix] empty LISTs returned by qual_lcs / qual_win are now handled 
 correctly.

=item [Refactoring] Merged FastaFilter.pl and FastqFilter.pl in this one script.

=back

=head1 CHANGELOG FastqFilter

=head2 1.10

=over

=item [Feature] substring extraction and modification of sequences based
 on coordinates file.

=back

=head2 1.03 [Thomas Hackl 2013-01-28]

=over

=item [Feature] C<--phred-transform> to switch phred offsets between 33 and 64

=item [BugFix] Did set sliding window size instead of min value.

=item [Feature] IDS can have leading '@' or '>'.

=item [Change] C<--min-length/--max-length> filter are now executed
 after any trimming stuff.

=item [Feature] Autodetect <--phred-offset>.

=item [Feature] Sliding window based C<--trim>. 

=item [Renaming] C<--slice-lcs> to C<--trim-lcs>.

=back

=over

=item 1.02 [Thomas Hackl 2012-13-09]

Bugfix. Nx computation now correctly uses total length of filtered
 output, not total length of input.

=item 1.01 [Thomas Hackl 2012-11-09]

Bugfix. Renamed C<< reads_ids >> to C<< read_ids >>.

=item 1.00 [Thomas Hackl 2012-11-08]

Major Refactoring. 

=item 0.06 [Thomas Hackl 2012-11-06]

Bugfix. --fasta now accuratly also prints the descrition of the header line.

=item 0.05 [Thomas Hackl 2012-10-02]

Added --slice_lcs

=item 0.04 [Thomas Hackl 2012-09-27]

Removed --n-content, added --base-content, which allows you to specify 
 particular bases or group of base in a "," separated list to be scanned for.

=item 0.03 [Thomas Hackl 2012-08-31]

Added --ids, --ids-exclude

=item 0.02 [Thomas Hackl 2012-08-30]

Versioned, Verbose::ProgressBar, --min-length

=back

=cut

=head1 TODO

=over

=item peek

=back

=cut



##------------------------------------------------------------------------##

=head1 SYNOPSIS

  perl SeqFilter --in <SEQFILE> <OPTIONS> --out <OUTFILE>
  
  cat <SEQFILE> | SeqFilter <OPTIONS> --out '-' > OUTFILE

=cut

=head1 OPTIONS

=cut

=over

=cut

my %opt;

=item [--in=<FASTA/FASTQ>]

Input FASTA/FASTQ file. Default STDIN.

=cut

$opt{'in=s'} = \(my $opt_in = '-');

=item [--out=<FILE/->]

Output file. Default off. Specify '-' for STDOUT.

=cut

$opt{'out=s'} = \(my $opt_out = undef);

=item [--tsv=<STRING/->]

Print tab separated statistics of data AFTER filtering to pathname, 
 default off, specify '-' for STDOUT, but only if '--out' is not redirected 
 to STDOUT.

Column order is: number of sequences, total length, longest, shortest, 
 Nx-values, base-contents. No header is printed, so multiple runs can 
 simply be concatenated.

=cut 

$opt{'tsv=s'} = \(my $opt_tsv = '');

=item [--ids=<FILE/-/IDLIST>]

Pathname to file of sequence IDs or a literal list of IDs to be reported. 
 Reads comma-separated, whitespace and newline separated lists. Specify '-' 
 to read IDs form STDIN. Leading '>' or '@' are allowed but not necessary.

  # get two seqs by ID
  SeqFilter fasta.fa --ids "seq35,seq49"
  # read ids from file
  SeqFilter fasta.fa --ids ids.list
  

=cut 

$opt{'ids=s'} = \(my $opt_ids = '');

=item [--ids-exclude]

Exclude reads specified by --ids from being reported. Default off.

=cut 

$opt{'ids-exclude'} = \(my $opt_ids_exclude = undef);

=item [--ids-pattern=<FILE/-/PATTERNLIST>]

A PATTERN or a link to a file containing multiple PATTERN, one per 
 line, to match against sequence ids. Only matching sequences will
 be returned.

  # get seqs with ids matching pattern
  SeqFilter seqs.fq --ids-patt 'comp2_c13_seq*|comp2_c88_seq*' 

=cut

$opt{'ids-pattern=s'} = \(my $opt_ids_pattern = undef);

=item [--ids-rename=<PATTERN>]

Provide a perl substitution pattern as string. The pattern is applied to 
 every id. Use global "$COUNT" to access the output sequence counter.

  SeqFilter library_1.fq --ids-rename='s/.*\//sprintf("MYLIB1_%05d\/", $COUNT)/e'
  # creates header:
  # @MYLIB_00001/1
  # @MYLIB_00002/1 ...

=cut

$opt{'ids-rename=s'} = \(my $opt_ids_rename = undef);

=item [--min-length=<INT>]

Minimum sequence length.

=cut

$opt{'min-length=i'} = \(my $opt_min_length = 0);

=item [--max-length=<INT>]

Maximum length for sequences to be retrieved. Default off.
 
=cut 

$opt{'max-length=i'} = \(my $opt_max_length = undef);

=item [--fasta]

FASTQ only. output FASTA format. Default FASTQ.

=cut

$opt{'fasta'} = \(my $opt_fasta = undef);

=item [--rev-comp=<FILE/-/LIST/*>]

Pathname to file of sequence IDs or list of IDs to be transformed, "*" to 
 transform all sequences. Formatting follows the same rules as --ids files. 

=cut 

$opt{'rev-comp=s'} = \(my $opt_rc = '');

=item [--check-format]

FASTQ only. Check every FASTQ record to have a valid format. '@/+' at the
 start of id lines, sequence and quality of identical length, phred within
 boundaries. Slows down the parsing.

=cut

$opt{'check-format!'} = \(my $opt_check_format = undef);

=item [--phred-offset] [auto]

FASTQ only. Phred offset for quality scores. Default auto-detect.

=cut

$opt{'phred-offset=i'} = \(my $opt_offset);

=item [--phred-transform]

FASTQ only. Transform phreds from input offset to specified C<--phred-transform> offset,
 usually 33 to 64 or wise versa.

=cut

$opt{'phred-transform'} = \(my $opt_transform);

=item [--phred-mask]

FASTQ only. Two values separated by ",", e.g "0,10" to mask all Nucleotides with
 phred below 10 with an "N".
 
NOTE: Requires C<--phred-offset>.

=cut

$opt{'phred-mask=s'} = \(my $opt_mask = undef);

=item [--trim-window=<INT1>,[<INT2>]]

FASTQ only. Trim sequences to quality >= INT1 using a sliding window of size
 INT2, default 10. The sliding window allows to have positions
 below the <--trim> cutoff provided the window mean is higher than
 INT1. It is made sure that a) positions with quality below cutoff only 
 occur within the remaining sequence, not at its start/end and b) windows
 never overlap eachother.

=cut

$opt{'trim-window=s'} = \(my $opt_trim = undef);

=item [--trim-lcs=<INT,INT,INT>]

FASTQ only. Three values separated by ",", e.g. "30,40,50" to grep all stretches
 of quality >= 30 and minimum length 50 from the sequences.
Faster than C<--trim-window> yet breaks sequences even on a single low
 quality position.

NOTE: C<--trim-lcs> and C<--trim-window> can be combined, e.g.

  --trim-lcs 5,40,100 --trim-window 10

will generate sequences with qualities of at least 5 at every position and 
 a window mean of 10.

=cut

$opt{'trim-lcs=s'} = \(my $opt_slice_lcs = undef);

=item [--substr=<FILE/-/LIST>]    

Pathname to a FILE containing information for subseq extraction/modification.
The format is a tsv, by default lines of the format ID FROM TO are expected.
Lines prepened by '#' are treated as comments and therefore ignored.
If --substr-perl-style is set, the lines must start with the ID of the read,
 followed by the substr
 values OFFSET,LENGTH,REPLACESEQ,REPLACEQUAL. The parameter usage is than the 
 same as for perl builtin C<substr> function, meaning an OFFSET alone is 
 sufficient, a positive value is set from the start of the sequence, a 
 negative offset from the end, without LENGTH, the sequence is returned from
 OFFSET to its end. REPLACEMENTS are introduced at the OFFSET position, 
 if LENGTH is 0, it is a simple insertion, else a part is deleted first and
 the REPLACEMENT is then inserted. Substring extraction is of course 
 performed prior to any other trimming. To trim all reads use '*' instead
 of the read id. This command will be performed prior to any indiviual 
 substr command.

  FROM TO:
    # extract sequence from pos 10 to pos 50
    read1 10 50
  
  OFFSET [LENGTH [REPLACEMENT]]
    # trim read1 head and tail by 10
    read1   10
    # extract from read2 250 nts starting at pos 15
    read2   15   250
    # replace 3 nt by an "N"" with qual "!" (for FASTQ)
    read3   3   1   N   !
    # trim from all reads 5nts at the beginning and the end.
    *	5
    *	-5

=cut

$opt{'substr=s'} = \(my $opt_substr_file = undef);

=item [--substr-perl-style]

By default, substr information are read according to the format FROM TO.
Set this flag to switch the behaviour to perl substr() like style of 
"OFFSET [LENGTH [REPLACEMENT]]"

=cut

$opt{'substr-perl-style!'} = \(my $opt_substr_perl);

=item [--N=<INT,INT...>]

Report Nx value (N50, N90...). Specify multiple values as comma separated
 STRING. Takes filter settings into account. Result might be ommited if to
 few sequences are retrieved. Default "50,90".

=cut 

$opt{'N=s'} = \(my $opt_N = '90,50');

=item [--base-content=<BASE(S),BASE(S),BASE(S),...>]

Count and print the relative amount of given bases. Takes a "," separated 
 list, each element of the list can be one or more bases. In the letter case
 the commulative amount of the individual bases is calculated.
 
Examples:
  --base-content=A,T,G,C,N   # content of regular bases
  --base-content=GC          # combined GC content

=cut

$opt{'base-content=s'} = \(my $opt_base_content = undef);

=item --verbose=<INT>

Toggle verbose level, default 2, which outputs statistics and progress.
Set 1 for statistics only or 0 for no verbose output.

=cut 

$opt{'verbose=i'} = \(my $opt_verbose = 2);

=item --quiet

Omit all verbose messages. The same as --verbose=0, Superceeds --verbose settings.

=cut

$opt{'quiet'} = \(my $opt_quiet);

=item [--help]

Display this help

=cut

$opt{'help|?'} = \(my $opt_help);

=item [--version|-V]

Display current version

=cut

$opt{'version|V'} = \(my $opt_version);



=back

=cut



GetOptions(%opt) or pod2usage(1);
if(@ARGV && !($ARGV[0] =~ /^-/)){
	$opt_in = $ARGV[0];
}

pod2usage(1) if $opt_help;
if ($opt_version){
	print "v$VERSION, rev$REVISION, last modified $MODIFIED\n";
	exit(1);
}

if($opt_max_length && $opt_min_length && ($opt_min_length > $opt_max_length)){
	pod2usage(exitval=>1, msg=>'min-length has to be smaller than max-length'); 
}

$opt_verbose = 0 if $opt_quiet; 



##------------------------------------------------------------------------##

=head1 MAIN

=cut

my $V = Verbose->new(
	level => 1,
	report_level => $opt_verbose,
	line_width => 80,
	
);

$V->verbose("$0, v$VERSION, rev$REVISION");


##------------------------------------------------------------------------##

=head2 check input file

=cut

# check STDIN, check files
# $opt_in, $opt_ids, $opt_ids_pattern, $opt_substr_file
# only one can be '-'
my $opt_stdin;


if($opt_in ne '-'){
	$V->exit("Cannot find input file: $opt_in") if ! -f $opt_in;
	$V->exit("Empty input file: $opt_in") if -s $opt_in == 0;
}else{
	$opt_stdin='--in';
}

# Fasta parser
$V->verbose("--in: ".( $opt_in ne '-' ? $opt_in : "STDIN" ));

my $FP;
my $FASTQ;

if(
	$FP = Fastq::Parser->new(
		file => $opt_in eq '-' ? undef : $opt_in, # defaults to STDIN if undef
	)->check_format
){
	$FASTQ = 1;
	if($opt_offset){
		$FP->phred_offset($opt_offset);
	}else{
		$opt_offset = $FP->guess_phred_offset 
	};
	pod2usage(msg=>'Could not guess phred offset, please specify manually', exitval => 2) 
		unless $opt_offset;
	$V->verbose('Detected FASTQ format, phred-offset '.$opt_offset);
}elsif(
	$FP = Fasta::Parser->new(
		file => $opt_in eq '-' ? undef : $opt_in, # defaults to STDIN if undef
	)->check_format
){
	$FASTQ = 0;
	$V->verbose('Detected FASTA format');
}else{
	$V->exit(( $opt_in ? $opt_in : "STDIN" )." neither FASTA nor FASTQ") unless $FP;
}

# a fix to handle gzipped files, -s doesnt work on gzip 
my $file_size = $FP->can('file_size') ? $FP->file_size : -s $FP->fh; 

my $VPB = Verbose::ProgressBar->new(
	level => 2,
	report_level => $opt_verbose,
	size => $file_size, # size and _fh required for gzip fix
	_fh => $FP->fh(),
);


# output file
my $ofh;
if($opt_out){
	if($opt_out eq '-'){
		$ofh = \*STDOUT;
	}else{
		open($ofh, ">", $opt_out) || $V->exit("Can't open output read file: '$opt_out'");
	} 
}


##------------------------------------------------------------------------##

=head2 FASTQ/FASTA parameter

=cut

my %opt_fq_only = (
	'phred-transform' => $opt_transform,
	'phred-mask' => $opt_mask,
	'trim-window' => $opt_trim,
	'trim-lcs' => $opt_slice_lcs,
	'check-format' => $opt_check_format,
);

if(!$FASTQ){
	while (my ($k,$v) = each %opt_fq_only){
		defined $v && $V->exit("$k can only be used on FASTQ data"); 
	}
}

##------------------------------------------------------------------------##

=head2 Maybe files parameter

=cut

my ($opt_ids_fh, $opt_rc_fh, $opt_ids_pattern_fh, $opt_substr_fh);
($opt_ids_fh, $opt_stdin) = opt2handle('--ids',$opt_ids, $opt_stdin);
($opt_ids_pattern_fh, $opt_stdin) = opt2handle('--ids-pattern',$opt_ids_pattern, $opt_stdin);
($opt_substr_fh, $opt_stdin) = opt2handle('--substr-file', $opt_substr_file, $opt_stdin);


#HERE

my %IDS = read_ids($opt_ids_fh) if $opt_ids;

my %RC_IDS;
my $RC_ALL;
if($opt_rc){
	my $opt_rc_fh;
	if($opt_rc eq '*'){
		$RC_ALL++;
	}elsif($opt_rc eq '-' && $opt_ids eq '-'){
		if($opt_ids_exclude){
			$V->exit("It does not make sense to rev-comp the same ids you are going to exclude!");
		}
		%RC_IDS = %IDS;
	}elsif(-f $opt_rc){
		open($opt_rc_fh, '<', $opt_rc) or $V->exit("$!: $opt_rc");
	}else{
		open($opt_rc_fh, '<', \$opt_rc) or $V->exit("$!: $opt_rc");
	}
	%RC_IDS = read_ids($opt_rc_fh) if $opt_rc_fh;
}


(my @IDS_PATTERS = <$opt_ids_pattern_fh>) if $opt_ids_pattern;
chomp(@IDS_PATTERS);
my %SUBSTR = read_substrs($opt_substr_fh) if $opt_substr_file;

##------------------------------------------------------------------------##

=head2 prepare som filter

=cut

my @opt_base_content = split(/\s*,\s*/, $opt_base_content) if $opt_base_content;
my @opt_N = sort{$a <=> $b}(split(/\s*,\s*/, $opt_N)) if $opt_N;

my $tsv;
if($opt_tsv){
	if($opt_tsv eq '-' && (!defined($opt_out) || $opt_out ne '-')){
		$tsv = \*STDOUT;
	}else{
		open($tsv, ">", $opt_tsv) || $V->exit("Can't open tsv stats file: '$opt_tsv'");
	} 
}

if($opt_mask){
	my($from, $to, $length) = split(',', $opt_mask);
	Fastq::Seq->Qual_low_range($from, $to, $opt_offset);
}

if($opt_slice_lcs){
	my($from, $to, $length) = split('\s*,\s*', $opt_slice_lcs);
	Fastq::Seq->Qual_lcs_range($from, $to, $opt_offset);
	Fastq::Seq->Qual_lcs_min_length($length);
}

if($opt_trim){
	my ($min, $wsize) = (split(',', $opt_trim), 10);
	Fastq::Seq->Qual_window_min($min);
	Fastq::Seq->Qual_window_size($wsize);
}

if($opt_check_format){
	Fastq::Seq->CheckFormat(1);
}

# TOTAL
my @total_L;
my $total_count;	# total count
my $total_length = 0;
my $total_longest = 0;
my $total_shortest = undef;
my %total_Ns;

# FILTERED
my @filtered_L; # lengths of seqs
my $COUNT = 0;
my $filtered_length = 0;
my $filtered_longest = 0;
my $filtered_shortest = undef;
my %filtered_Ns; #Nx values
my %BCs; # base contents



##------------------------------------------------------------------------##

=head2 loop through file and apply filter

=cut

# loop through FASTQ
while (my $SEQ = $FP->next_seq()){
	$total_count++;
	$VPB->update();
	
	my $ID = $SEQ->id;
	my $length = length($SEQ->seq);
	
	# TOTAL STATS		
	# store length for Nx computation
	push @total_L, $length;
	# length stuff
	$total_length+=$length;
	$total_longest = $length if $length > $total_longest;
	$total_shortest = $length if (!defined ($total_shortest) || $length < $total_shortest);
	
	
	# FILTER
	# ids
	if(keys %IDS){
		if ($opt_ids_exclude){
			next if $IDS{$ID}
		}else{
			next unless $IDS{$ID}
		}
	}
	
	if(@IDS_PATTERS){
		next unless grep{$ID =~m/$_/}@IDS_PATTERS;
	}

	my @fq = ($SEQ);

	# substr
	if($opt_substr_file && exists $SUBSTR{'*'} ){
		@fq = map{
			$_->substr_seq(@{$SUBSTR{'*'}});
		}@fq;
	}
	
	if($opt_substr_file && exists $SUBSTR{$ID} ){
		my @tmp;
		foreach my $fq (@fq){
			my @subs = $fq->substr_seq(@{$SUBSTR{$ID}{coords}});
			for(my $i=0; $i<@subs; $i++){
				$subs[$i]->reverse_complement() if $SUBSTR{$ID}{rc}[$i]
			}
			push @tmp, @subs;
		};
		@fq = @tmp;
	}
	
	# slice by lcs
	if($opt_slice_lcs){ # trim lcs
		@fq = map{$_->substr_qual_lcs(1)}@fq;
	}
	if($opt_trim){ # trim window
		@fq = map{
			my @wins = $_->qual_window(1);
			@wins ? $_->substr_seq(@wins) : ();
		}@fq;
	}
	
	foreach my $SEQ (@fq){
		my $length = length($SEQ->seq);
		# min-length/max-length
		if($opt_min_length){ next if $length < $opt_min_length }; 
		if($opt_max_length){ next if $length > $opt_max_length };

		# 
		$COUNT++;
		
		# rename ids
		if($opt_ids_rename){
			my $id = $SEQ->id();
			eval '$id =~ '.$opt_ids_rename;
			$V->exit("Eval error in --ids-rename pattern\n".$@) if $@;
			$SEQ->id($id);
		}

		# reverse complement
		if($RC_ALL){
			$SEQ->reverse_complement;
		}elsif(keys %RC_IDS){
			$SEQ->reverse_complement if $RC_IDS{$ID};
		}
		
		# mask low quality
		$opt_mask && $SEQ->mask_qual_low();
		
		# OUTPUT
		if($opt_out){
			if($opt_fasta){
				print $ofh sprintf(">%s\n%s\n", substr ($SEQ->seq_head, 1), $SEQ->seq)
			}elsif($opt_transform){
				print $ofh $SEQ->phred_transform()->string();
			}else{
				print $ofh $SEQ->string();
			}
		}
		
		# OUTPUT STATS
		# store length for Nx computation
		push @filtered_L, $length;
		# length stuff
		$filtered_length+=$length;
		$filtered_longest = $length if $length > $filtered_longest;
		$filtered_shortest = $length if (!defined ($filtered_shortest) || $length < $filtered_shortest);
		# base content
		if(@opt_base_content){
			foreach (@opt_base_content){
				$BCs{$_} += $SEQ->base_content($_);
			}
		}
	}
}

#TODO: adjust to file_s
$VPB->finish($file_size);


=head2 print summary

=cut

#Nx computation
if(@opt_N){
	%filtered_Ns = Nx(total_length => $filtered_length, lengths => [@filtered_L], Nxs => [@opt_N]);
	%total_Ns = Nx(total_length => $total_length, lengths => [@total_L], Nxs => [@opt_N]);
}

$V->hline();
$V->verbose('Input');
$V->verbose(sprintf("%-15s %10d #","Sequences", $total_count));
$V->verbose(sprintf("%-15s %10d bp", "Total", $total_length));
$V->verbose(sprintf("%-15s %10d bp", "Longest", $total_longest));
$V->verbose(sprintf("%-15s %10d bp", "Shortest",$total_shortest));

my @total_Ns;
foreach (sort{$a <=> $b}keys %total_Ns){
	$V->verbose(sprintf("%-15s %10d bp", "N$_", $total_Ns{$_}));
	push @total_Ns, $total_Ns{$_};
}

$V->hline();

unless(@filtered_L){
	$V->verbose("No sequences found matching given filter criteria");
	exit(1);
}



$V->verbose("Filtered");
$V->verbose(sprintf("%-15s %10d #","Sequences", scalar @filtered_L));
$V->verbose(sprintf("%-15s %10d bp", "Total", $filtered_length));
$V->verbose(sprintf("%-15s %10d bp", "Longest", $filtered_longest));
$V->verbose(sprintf("%-15s %10d bp", "Shortest", $filtered_shortest));

my @filtered_Ns;
foreach (sort{$a <=> $b}keys %filtered_Ns){
	$V->verbose(sprintf("%-15s %10d bp", "N$_", $filtered_Ns{$_}));
	push @filtered_Ns, $filtered_Ns{$_};
}

# base content
my @BCs;
if(keys %BCs){
	foreach my $k(sort keys %BCs){
		$V->verbose(sprintf("%-15s %10d bp %10.2f %%", "[$k]", $BCs{$k}, (100*$BCs{$k}/$filtered_length)));
		push @BCs, $BCs{$k};
	}
}


$V->hline();
$V->nline();



if($tsv){
	print $tsv join("\t", scalar @filtered_L, $filtered_length, $filtered_longest, $filtered_shortest, @filtered_Ns, @BCs),"\n";
}



##------------------------------------------------------------------------##

=head1 Methods

=cut

=head2 opt2handle

Use this method with options accepting <LIST/FILE/-> to decide what was 
 actually provided and to return a handle to the content. 
=cut

sub opt2handle{
	my ($k, $v, $stdin) = @_;
	my $h;
	return unless $v; 
	
	if($v eq '-'){
		$V->exit("Cannot read $k from STDIN, already used with $stdin") if $stdin;
		$h = \*STDIN;
		$stdin = $k;
		$V->verbose("$k: STDIN");
	}elsif(-f $v){
		$V->verbose("$k: $v");
		open($h, '<', $v) or $V->exit("$!: $v");
	}else{
		open($h, '<', \$v) or $V->exit("$!: $v");;
	}
	return $h;	
}


# DEPRECATED -> opt2handle
#my %mf = (
#	'--ids' => \$opt_ids, 
#	'--ids_pattern' => \$opt_ids_pattern,
#	'--substr_file' => \$opt_substr_file
#);
#
#foreach(qw(--ids --ids_pattern --substr_file)){
#	next unless ${$mf{$_}}; 
#	if($mf{$_} eq '-'){
#		$V->exit("Cannot read $_ from STDIN, already used with $stdin") if $stdin;
#		${$mf{$_}} = \*STDIN;
#		$stdin = $_;
#		$V->verbose("$_: STDIN");
#	}elsif(-f ${$mf{$_}}){
#		$V->verbose("$_: ${$mf{$_}}");
#		open(my $fh, '<', $_);
#		${$mf{$_}} = $fh;
#	}else{
#		open(my $fh, '<', \$_);
#		${$mf{$_}} = $fh;
#	}
#}


=head2 read_ids

=cut

sub read_ids{
	my ($fh) = @_;
	my @IDS;
	while(<$fh>){
		next unless $_; # ignore empty lines
		next if /^#/; # ignore comments
		push @IDS, split(/[\s,\n]+/, $_);
	}
	map{s/^[>@]//}@IDS;
	my %IDS;
	@IDS{@IDS}=map{1}@IDS;
	return %IDS;
}



=head2 read_substrs

Read substr coordinate file and return 

=cut

sub read_substrs{
	my ($fh)=@_;
	my %s;
	while(<$fh>){
		chomp();
		next unless $_; # ignore empty lines
		next if /^#/; # ignore comments
		my ($id, @f) = split(/\t/, $_, 4);
		$id =~ s/^[>@]//;
		unless($opt_substr_perl){
			# transform from-to to offset-length
			if(@f==1){
				push @{$s{$id}{coords}}, [$f[0]];
				push @{$s{$id}{rc}}, 0;
			}elsif($f[0] > $f[1]){ # third param is rev-comp
				push @{$s{$id}{coords}}, [$f[1], $f[0]-$f[1]+1];
				push @{$s{$id}{rc}}, 1;
			}else{
				push @{$s{$id}{coords}}, [$f[0], $f[1]-$f[0]+1];
				push @{$s{$id}{rc}}, 0;
			}
		}else{
			push @{$s{$id}{coords}}, [@f];
			push @{$s{$id}{rc}}, 0;
		}
	}
	return %s;	
}

sub Nx{
	my $p = {
		total_length => undef,
		lengths => undef,
		Nxs => [@opt_N],
		@_
	};
	
	my %Ns;
	my @L = sort{$b <=> $a}@{$p->{lengths}};
	my @ls = map{$p->{total_length} * ($_/100)}@{$p->{Nxs}};
	
	my $lc = 0;
	foreach my $l (@L){
		$lc+= $l;
		if($lc >= $ls[0]){
			shift @ls;
			$Ns{shift @{$p->{Nxs}}} = $l;
			last unless @ls;
		}
	}
	return %Ns;
}	




=head1 AUTHOR

Thomas Hackl S<thomas.hackl@uni-wuerzburg.de>

=cut
